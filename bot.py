from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *

# —Ç—É—Ç –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –Ω–∞—à –∫–æ–¥ :)

async def start(update, context):
    dialog.mod= 'main'
    text = load_message('main')
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
        'profile': '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé',
        'opener': '—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
        'message': '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
        'date': ' –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
        'gpt': '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†'
    })

async def gpt(update, context):
    dialog.node ='gpt'
    text = load_message('gpt')
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)

async def gpt_dialog(update, context):
    text = update.message.text
    promt  =  load_prompt('gpt')
    answer = await chatgpt.send_question(promt, text)
    await send_text(update, context, answer)


async def date(update, context):
    dialog.node='date'
    text = load_message('date')
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        'date_grande': '–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ',
        'date_robbie': '–ú–∞—Ä–≥–æ –†–æ–±–±–∏',
        'date_zendaya': '–ó–µ–Ω–¥–µ—è',
        'date_gosling': '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥',
        'date_hardy': '–¢–æ–º –•–∞—Ä–¥–∏'

    })

async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, '–ü–µ—á–∞—Ç–∞–µ—Ç...')
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)



async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_photo(update, context, query)
    await send_text(update, context, '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π.')

    promt = load_prompt(query)
    chatgpt.set_prompt(promt)


async def message(update, context):
    dialog.node ='message'
    text = load_message('message')
    await send_photo(update, context, "message")
    await send_text_buttons(update, context, text,{
         'message_next': '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'message_date': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ'})
    dialog.list.clear()

async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    promt = load_prompt(query)
    user_chat_history = '\n\n'.join(dialog.list)
    my_message = await send_text(update, context, '–î—É–º–∞—é...')
    answer = await chatgpt.send_question(promt, user_chat_history)
    await my_message.edit_text(answer)

async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)

async def profile(update, context):
    dialog.node='profile'
    text = load_message('profile')
    await send_photo(update, context, 'profile')
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.counter=0
    await send_text(update, context, '–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?')


async def profile_dialog(update, context):
    text = update.message.text
    dialog.counter += 1
    if dialog.counter ==1 :
        dialog.user['age']=text
        await send_text(update, context, '–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?')
    elif dialog.counter==2:
        dialog.user["occupation"] = text
        await send_text(update, context, "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
    elif dialog.counter == 3:
        dialog.user["hobby"] = text
        await send_text(update, context, "–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?")
    elif dialog.counter == 4:
        dialog.user["annoys"] = text
        await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.counter == 5:
        dialog.user["goals"] = text
        promt=load_prompt('profile')
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update, context,'–°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—åüß†...')
        answer = await chatgpt.send_question(promt, user_info)
        await my_message.edit_text(answer)

async def opener(update, context):
    dialog.node = "opener"
    text = load_message('opener')
    await send_photo(update, context, 'opener')
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.counter=0
    await send_text(update, context, '–ò–º—è –¥–µ–≤—É—à–∫–∏?')


async def opener_dialog(update, context):
    text = update.message.text
    dialog.counter += 1
    if dialog.counter == 1:
        dialog.user['name'] = text
        await send_text(update, context, '–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?')
    elif dialog.counter == 2:
        dialog.user["age"] = text
        await send_text(update, context, "–û—Ü–µ–Ω–∏—Ç–µ –µ–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?")
    elif dialog.counter == 3:
        dialog.user["handsome"] = text
        await send_text(update, context, "–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
    elif dialog.counter == 4:
        dialog.user["job"] = text
        await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.counter == 5:
        dialog.user["goals"] = text
        promt = load_prompt('opener')
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update, context,'–°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—åüß†...')
        answer = await chatgpt.send_question(promt, user_info)
        await my_message.edit_text(answer)
async def hello(update, context):
    if dialog.node =="gpt":
        await gpt_dialog(update, context)
    if dialog.node == "date":
        await date_dialog(update, context)
    if dialog.node == "message":
        await message_dialog(update, context)
    if dialog.node == "profile":
        await profile_dialog(update, context)
    if dialog.node == "opener":
        await opener_dialog(update, context)
    else:
        await send_text(update, context, '*–ü—Ä–∏–≤–µ—Ç*, ' + update.message.chat.first_name)
        await send_text(update, context, '_–ö–∞–∫ –¥–µ–ª–∞?_')
        await send_text(update, context, '–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ ' + update.message.text)
        await  send_photo(update, context, "avatar_main")
        await send_text_buttons(update, context, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å',
                                {'start': '–ó–∞–ø—É—Å—Ç–∏—Ç—å', 'stop':'–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'})
async def hello_buttons(update, context):
    query = update.callback_query.data
    if query == 'start':
        await send_text(update, context, '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω')
    else:
        await send_text(update, context, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


dialog = Dialog()
dialog.node = None
dialog.list =[]
dialog.user ={}
dialog.counter=0

chatgpt = ChatGptService(token='gpt:61rNHlA6YvvAAhkXHkjMJFkblB3T1ra23XYN7pLIKmOsUDqe')

app = ApplicationBuilder().token("7077700280:AAEDTaFt-vhCzlq0WGKIulzMb-Mx0FaFQoY").build()
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('date', date))
app.add_handler(CommandHandler('message', message))
app.add_handler(CommandHandler('profile', profile))
app.add_handler(CommandHandler('opener', opener))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))

app.add_handler(CallbackQueryHandler(date_button, pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(hello_buttons))
app.run_polling()
